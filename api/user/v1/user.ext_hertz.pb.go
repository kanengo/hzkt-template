// Code generated by protoc-gen-go-hertz. DO NOT EDIT.
// versions:
// - protoc-gen-go-hertz v1.0.0
// - protoc             v3.21.12
// source: user/v1/user.ext.proto

package v1

import (
	context "context"
	app "github.com/cloudwego/hertz/pkg/app"
	config "github.com/cloudwego/hertz/pkg/common/config"
	protocol "github.com/cloudwego/hertz/pkg/protocol"
	consts "github.com/cloudwego/hertz/pkg/protocol/consts"
	hertz "github.com/kanengo/ktp/transport/hertz"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = new(app.RequestContext)
var _ = new(hertz.Server)
var _ = new(hertz.Client)
var _ = new(config.RequestOption)
var _ = new(protocol.Request)
var _ = consts.StatusOK

const OperationUserExtGetUserInfo = "/user.v1.UserExt/GetUserInfo"

type UserExtHertzServer interface {
	GetUserInfo(context.Context, *GetUserInfoReq) (*GetUserInfoRes, error)
}

type UserExtHertzMiddleware interface {
	GetUserInfoMiddleware() []app.HandlerFunc
}

func RegisterUserExtHertzServer(s *hertz.Server, srv UserExtHertzServer, mw UserExtHertzMiddleware, routeMw ...app.HandlerFunc) {
	r := s.Group("/", routeMw...)
	r.POST("/user/getUserInfo", _UserExt_GetUserInfo0_Hertz_Handler(s, srv, mw)...)
}

func _UserExt_GetUserInfo0_Hertz_Handler(s *hertz.Server, srv UserExtHertzServer, mw UserExtHertzMiddleware) []app.HandlerFunc {
	var handlers []app.HandlerFunc
	if mw != nil {
		handlers = append(handlers, mw.GetUserInfoMiddleware()...)
	}
	h := func(ctx context.Context, c *app.RequestContext) {
		var err error
		var req GetUserInfoReq
		err = c.BindAndValidate(&req)
		if err != nil {
			c.String(consts.StatusBadRequest, err.Error())
			return
		}
		resp, err := srv.GetUserInfo(ctx, &req)
		if err != nil {
			s.ErrorEncoder(ctx, c, err)
			return
		}
		s.ResponseEncoder(ctx, c, resp)
		return
	}

	return append(handlers, h)
}

type UserExtHertzClient interface {
	GetUserInfo(ctx context.Context, req *GetUserInfoReq, opts ...config.RequestOption) (rsp *GetUserInfoRes, err error)
}

type UserExtHertzClientImpl struct {
	cc   *hertz.Client
	host string
}

func NewUserExtHertzClient(client *hertz.Client, host string) UserExtHertzClient {
	return &UserExtHertzClientImpl{client, host}
}

func (c *UserExtHertzClientImpl) GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...config.RequestOption) (*GetUserInfoRes, error) {
	uri := c.host + "/user/getUserInfo"
	var out GetUserInfoRes

	err := c.cc.Do(ctx, uri, "POST", in, &out, opts...)
	if err != nil {
		return nil, err
	}

	return &out, nil
}

type UserExtHertzLocalImpl struct {
	impl UserExtHertzServer
}

func NewUserExtHertzLocalImpl(impl UserExtHertzServer) UserExtHertzClient {
	return &UserExtHertzLocalImpl{impl}
}

func (c *UserExtHertzLocalImpl) GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...config.RequestOption) (*GetUserInfoRes, error) {
	return c.impl.GetUserInfo(ctx, in)
}
